// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  engineType      = "binary"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  active             Boolean             @default(true)
  vehicules          Vehicule[]
  assurances         Assurance[]
  fournisseurs       Fournisseur[]
  pieces             Piece[]
  mecaniciens        Mecanicien[]
  maintenances       Maintenance[]
  maintenance_pieces Maintenance_Piece[]

  @@map(name: "users")
}

model Vehicule {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         Int           @default(1)
  traqueur        String        @db.VarChar(255)
  trackerId       Int           @default(1)
  sourceId        Int           @default(1)
  nom             String        @db.VarChar(255)
  immatriculation String        @db.VarChar(255)
  numero_chassis  String        @db.VarChar(255)
  carburant       String
  assurance       Assurance?
  photo           String        @db.VarChar(255)
  maintenances    Maintenance[]


  @@map(name: "vehicules")
}

model Assurance {
  id            Int      @id @unique @default(autoincrement())
  numero_police String   @db.VarChar(255)
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int      @default(1)
  date_debut    String
  date_fin      String
  vehicule      Vehicule @relation(fields: [vehicule_id], references: [id], onDelete: Cascade)
  vehicule_id   Int      @unique

  @@map(name: "assurances")
}

model Fournisseur {
  id             Int     @id @unique @default(autoincrement())
  user           User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        Int     @default(1)
  nom            String  @db.VarChar(255)
  prenom         String  @db.VarChar(255)
  nom_entreprise String  @db.VarChar(255)
  numero_tel     String  @db.VarChar(10)
  adresse        String  @db.VarChar(255)
  description    String  @db.VarChar(500)
  pieces         Piece[]


  @@map(name: "fournisseurs")
}

model Piece {
  id             Int                 @id @unique @default(autoincrement())
  user           User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        Int                 @default(1)
  nom            String              @unique @db.VarChar(255)
  quantite       Int
  fournisseur    Fournisseur         @relation(fields: [fournisseur_id], references: [id])
  fournisseur_id Int
  maintenaces    Maintenance_Piece[]

  @@map(name: "pieces")
}

model Mecanicien {
  id             Int    @id @unique @default(autoincrement())
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        Int    @default(1)
  nom            String @db.VarChar(255)
  prenom         String @db.VarChar(255)
  nom_entreprise String @db.VarChar(255)
  numero_tel     String @db.VarChar(10)
  adresse        String @db.VarChar(255)
  description    String @db.VarChar(500)

  Maintenance Maintenance[]
  @@map(name: "mecaniciens")
}

model Maintenance {
  id            Int                 @id @unique @default(autoincrement())
  user          User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int                 @default(1)
  nom           String              @db.VarChar(255)
  vehicule      Vehicule            @relation(fields: [vehicule_id], references: [id], onDelete: Cascade)
  vehicule_id   Int
  mecanicien    Mecanicien          @relation(fields: [mecanicien_id], references: [id], onDelete: Cascade)
  mecanicien_id Int
  type          TypeMaintenance     @relation(fields: [type_id], references: [id])
  type_id       Int
  pieces        Maintenance_Piece[]
  description   String              @db.VarChar(500)
  type2         Type2
  cout          Float
  fichier       String              @db.VarChar(255)
  date          DateTime            @default(now())
  alerte_date   DateTime?          
  alerte_km     Int?        
  etat          Etat                @default(EnCours)

  @@map(name: "maintenances")
}

enum Type2 {
  Curative
  Preventive
}

enum Etat {
  Avant
  EnCours
  Repare
}

model TypeMaintenance {
  id           Int           @id @default(autoincrement())
  type         String        @db.VarChar(255)
  maintenances Maintenance[]

  @@map(name: "type_de_maintenance")
}

model Maintenance_Piece {
  maintenance    Maintenance @relation(fields: [maintenance_id], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        Int         @default(1)
  maintenance_id Int
  piece          Piece       @relation(fields: [piece_id], references: [id])
  piece_id       Int
  quantite       Int


  @@id([maintenance_id, piece_id])
  @@map(name: "maintenance_pieces")
}
